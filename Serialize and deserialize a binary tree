   private:
    void dfs(vector<int> &v, Node *node)
    {
        if(node->left)
        {
            dfs(v, node->left);
        }
        v.push_back(node->data);
        if(node->right)
        {
            dfs(v, node->right);
        }
    }
    void makeTree(vector<int> &A, Node *dummy, Node *left, int ind)
    {
        if(ind == A.size())
        {
            dummy->left = left;
            return;
        }
        Node *node = new Node(A[ind]);
        node->left = left;
        ind++;
        if(ind == A.size())
        {
            dummy->left = node;
            return;
        }
        Node *right = new Node(A[ind]);
        node->right = right;
        ind++;
        if(ind == A.size())
        {
            dummy->left = node;
            return;
        }
        makeTree(A, dummy, node, ind);
    }
    public:
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
        //Your code here
        vector<int> v;
        dfs(v, root);
        return v;
    }
    
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
       //Your code here
       Node *left = new Node(A[0]);
       Node *dummy = new Node(NULL);
       makeTree(A, dummy, left, 1);
       return dummy->left;
    }
