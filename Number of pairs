public:
    // Function to count number of pairs such that x^y is greater than y^x.
    long long countPairs(std::vector<int> &arr, std::vector<int> &brr) {
        int M = arr.size();
        int N = brr.size();
        
        // Sort the array brr to use binary search for efficient calculation.
        std::sort(brr.begin(), brr.end());

        // Count frequencies of 0, 1, 2, 3, 4 in the array brr.
        long long freq[5] = {0};
        for (int i = 0; i < N; i++) {
            if (brr[i] < 5) {
                freq[brr[i]]++;
            }
        }

        long long totalPairs = 0;

        // Traverse through every element of arr and calculate the valid pairs.
        for (int i = 0; i < M; i++) {
            totalPairs += countValidPairs(arr[i], brr, N, freq);
        }

        return totalPairs;
    }

private:
    long long countValidPairs(int x, const std::vector<int>& brr, int N, long long freq[]) {
        // If x is 0, no pair (x, y) can satisfy x^y > y^x.
        if (x == 0) return 0;

        // If x is 1, it can only form pairs with y = 0.
        if (x == 1) return freq[0];

        // Binary search to find the first index in brr where y > x.
        auto idx = std::upper_bound(brr.begin(), brr.end(), x) - brr.begin();

        // All elements in brr from idx to N satisfy x^y > y^x.
        long long count = N - idx;

        // Add pairs (x, 0) and (x, 1) as they always satisfy the condition.
        count += freq[0] + freq[1];

        // Handle special cases:
        if (x == 2) {
            count -= (freq[3] + freq[4]); // Exclude pairs (2, 3) and (2, 4).
        }
        if (x == 3) {
            count += freq[2]; // Include pair (3, 2).
        }

        return count;
    }
