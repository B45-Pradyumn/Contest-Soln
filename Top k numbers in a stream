public:

    struct ComparePairs {
        bool operator()(const pair<int, int>& p1, const pair<int, int>& p2) {
            if (p1.first == p2.first) {
                // If frequencies are the same, prioritize smaller value
                return p1.second > p2.second;
            }
            // Otherwise, prioritize higher frequency
            return p1.first < p2.first;
        }
    };

    vector<vector<int>> kTop(vector<int>& arr, int n, int k) {
        vector<vector<int>> ans;
        map<int, int> mp;

        for (int i = 0; i < n; i++) {
            if (arr[i] == 0) continue;

            mp[arr[i]]++;
            priority_queue<pair<int, int>, vector<pair<int, int>>, ComparePairs> pq;

            for (auto it : mp) {
                pq.push({ it.second, it.first });
            }

            vector<int> temp;
            int a = k;
            while (!pq.empty() && a > 0) {
                temp.push_back(pq.top().second);
                pq.pop();
                a--;
            }

            ans.push_back(temp);
        }

        return ans;
    }
