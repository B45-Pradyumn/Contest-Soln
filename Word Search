class Solution{
    public boolean isWordExist(char[][] board, String word){
        int dx[]={-1,0,1,0};
        int dy[]={0,1,0,-1};
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]==word.charAt(0)){
                    int index=1;
                    Queue<Pair> q=new LinkedList<>();
                    q.offer(new Pair(i,j));
                    boolean[][] visit=new boolean[board.length][board[0].length];
                    visit[i][j]=true;
                    while(!q.isEmpty()){
                        Pair curr=q.poll();
                        if(index==word.length()) return true;
                        for(int i2=0;i2<4;i2++){
                            int newRow=curr.row+dx[i2];
                            int newCol=curr.col+dy[i2];
                            if(newRow>=0 && newCol>=0 && newRow<board.length && newCol<board[0].length && !visit[newRow][newCol] && board[newRow][newCol]==word.charAt(index)){
                                visit[newRow][newCol]=true;
                                q.offer(new Pair(newRow,newCol));
                            }
                        }
                         index++;
                    }
                }
            }
        }
        return false;
    }
    class Pair{
        int row,col;
        Pair(int row,int col){
            this.row=row;
            this.col=col;
        }
    }
}
