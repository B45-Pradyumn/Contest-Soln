public:
    // partition function divide the list arround the first element
    // minimum length - 2 elemetns
    struct Node* partition(struct Node* first, struct Node* last) {
        // two pointers runs through the list comparing with the head
        // p1 currently checked node
        // p2 swaps if smaller than the pivot
        Node* p1 = first;
        Node* p2 = first;
        // loop until the last
        while(p1 != last)
        {
            // compare p1 with pivot
            if(p1->data < first->data)
            {
                swap(p1->data, p2->next->data);
                p2 = p2->next;
            }
            p1 = p1->next;
        }
        // increase p2 and swap with pivot
        swap(p2->data, first->data);
        return p2;
    }
    
    // sortList function finds partition of the list
    // and recursively sort the two halves
    void sortList(struct Node* first, struct Node* last) {
        if(first && first != last)
        {
            // find partition arround first element
            Node* prt = partition(first, last);
            
            // recursive call to two halves of the list
            // make sure more then one element left
            sortList(first, prt);
            sortList(prt->next, last);
        }
    }
    
    struct Node* quickSort(struct Node* head) {
        // The approach is to create two funcion of quick sort
        // 1. partition functuin that receives begin + end pointers
        //    the function partitions the elements on sides of first
        //    and returns its new position
        // 2. sortList function that receives begin + end elements
        //    partition the first element
        //    sort begin - partition
        //    sort partition->next - end
        
        sortList(head, NULL);
        return head;
    }
